//==================================================================================================================================//
//!< @file		ISharokuLibrary.h
//!< @brief		ISharokuLibraryクラスヘッダ
//!< @author	T.Haga
//==================================================================================================================================//

#ifndef SL_SHAROKU_LIBRARY_H
#define SL_SHAROKU_LIBRARY_H

#include <windows.h>
#include "Common/slTypes.h"

namespace sl
{

//======================================================================//
//!< SharokuLibararyのInterfaceクラス
//======================================================================//
interface ISharokuLibrary
{

public:
	//-----------------------------------------------------------------//
	// インスタンス関連関数
	//-----------------------------------------------------------------//

	/** 
	* インスタンス生成関数 
	* @attention	このクラスを使用する場合は必ず最初に呼ぶこと
	*/
	static void Create(void);

	/** インスタンス破棄関数 */
	static void Delete(void);

	/**
	* インスタンス取得関数
	* @return ISharokuLibraryクラスのインスタンスへのポインタ
	*/
	inline static ISharokuLibrary*	Instance(){ return m_pILibrary; }

	//-----------------------------------------------------------------//
	// 初期化&破棄関連関数
	//-----------------------------------------------------------------//

	/** 
	* 初期化関数 
	* @param[in] pWinTitle		ウィンドウのタイトル
	* @param[in] winWidth		ウィンドウの横幅
	* @param[in] winHeight		ウィンドウの縦幅
	*/
	virtual void Initialize(t_char*  pWinTitle, int winWidth, int winHeight) = 0;

	/** 破棄関数 */
	virtual void Finalize(void) = 0;

	//-----------------------------------------------------------------//
	// Window関連関数
	//-----------------------------------------------------------------//

	/** 
	* ウィンドウ更新関数
	* @return ウィンドウが破棄されたかどうか true = 破棄された false = 破棄されていない
	*/
	virtual bool UpdateWindow(void)  = 0;

	/** 
	* スクリーンモードを変更する関数
	* @param[in] isFullScreen		true→フルスクリーン, false→ウィンドウモード
	*/
	virtual void ChangeWindowMode(bool isFullScreen) = 0;

	//-----------------------------------------------------------------//
	// 描画関連関数
	//-----------------------------------------------------------------//

	/** 描画開始処理 */
	virtual void StartRender(void) = 0;

	/** 描画終了処理 */
	virtual void EndRender(void) = 0;

	//-----------------------------------------------------------------//
	// インプット関連関数
	//-----------------------------------------------------------------//

	//-----------------------------------------------------------------//
	// 音関連関数
	//-----------------------------------------------------------------//

	//-----------------------------------------------------------------//
	// その他関数
	//-----------------------------------------------------------------//

	/** Desutructor */
	virtual ~ISharokuLibrary(void){}

private:
	static ISharokuLibrary*		m_pILibrary;			//!<  ISharokuLibraryクラスのインスタンスへのポインタ
};

}	// namespace sl

#endif	// SL_SHAROKU_LIBRARY_H

//==================================================================================================================================//
// END OF FILE
//==================================================================================================================================//
